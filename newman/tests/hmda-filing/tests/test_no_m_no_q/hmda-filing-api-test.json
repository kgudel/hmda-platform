{
  "info": {
    "name": "HMDA Filing API Test(s)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "testNumber",
      "value": 0,
      "type": "int"
    },
    {
      "key": "requestBody",
      "value": "",
      "type": "string"
    },
    {
      "key": "expectedResponse",
      "value": "",
      "type": "string"
    },
    {
      "key": "sequenceNumber",
      "value": 0,
      "type": "int"
    },
    {
      "key": "sourceFile",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "testNumber = pm.variables.get(\"testNumber\");",
          "let testData = pm.iterationData.get(\"testData\")",
          "let requestBody = JSON.stringify(testData[testNumber]? testData[testNumber].requestBody:{} )",
          "let expectedResponse = JSON.stringify(testData[testNumber]? testData[testNumber].expectedResponse:{} )",
          "let sourceFile = testData[testNumber].sourceFile",
          "++testNumber",
          "pm.variables.set(\"testNumber\",testNumber);",
          "pm.variables.set(\"requestBody\",requestBody);",
          "pm.variables.set(\"sourceFile\",sourceFile);"

        ]
      }
    }
  ],
  "item": [
    {
      "name": "Start A Filing Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200, 201 or 400\",function () {",
              "pm.expect(pm.response.code).to.be.oneOf([200,201,400]);",
              "});",
              "",
              "pm.test(\"Start A Filing Test\", function () {",
              "let actualResponse = pm.response.json()",
              "let testData = pm.iterationData.get(\"testData\")",
              "let testDataChunk = testData[testNumber-1]",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.period.year).to.equal(testDataChunk.expectedResponse.filing.period.year)}",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.period.quarter).to.equal(testDataChunk.expectedResponse.filing.period.quarter)}",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.lei).to.equal(testDataChunk.expectedResponse.filing.lei)}",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.period).to.equal(testDataChunk.expectedResponse.filing.period)}",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.status).to.eql(testDataChunk.expectedResponse.filing.status)}",
              "});"
            ]
          }
        }
      ],
      "request": {
        "url": "{{host_filing}}/institutions/{{test-lei}}/filings/{{filing-year}}",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {"key": "Authorization",
            "value": "{{authToken}}"
          }

        ],
        "body": {},
        "description": "Start A Filing Test"
      },
      "response": []
    },
    {
      "name": "Create A Submission Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\",function () {",
              "      pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Create A Submission Test\", function () {",
              "let actualResponseID = pm.response.json().id",
              "let testData = pm.iterationData.get(\"testData\")",
              "let testDataChunk = testData[testNumber-1]",
              "pm.expect(actualResponseID.lei).to.equal(testDataChunk.expectedResponse.id.lei)",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.period.year).to.equal(testDataChunk.expectedResponse.filing.period.year)}",
              "if(pm.response.code==200){pm.expect(actualResponse.filing.period.quarter).to.equal(testDataChunk.expectedResponse.filing.period.quarter)}",              "pm.variables.set(\"sequenceNumber\",actualResponseID.sequenceNumber);",
              "console.log(pm.variables.get(\"sequenceNumber\"))",
              "});"
            ]
          }
        }
      ],
      "request": {
        "url": "{{host_filing}}/institutions/{{test-lei}}/filings/{{filing-year}}/submissions",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {"key": "Authorization",
            "value": "{{authToken}}"
          }

        ],
        "body": {},
        "description": "Create A Submission Test"
      },
      "response": []
    },
    {
      "name": "Upload A Submission Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 202\",function () {",
              "pm.response.to.have.status(202);",
              "});",
              "",
              "pm.test(\"Upload A Submission Test\", function () {",
              "let actualResponse = pm.response.json()",
              "console.log(JSON.stringify(actualResponse))",
							"let testData = pm.iterationData.get(\"testData\")",
							"let testDataChunk = testData[testNumber-1]",
							"pm.expect(actualResponse.status.code).to.equal(testDataChunk.expectedResponse.status.code)",
							"pm.expect(actualResponse.status.message).to.equal(testDataChunk.expectedResponse.status.message)",
							"pm.expect(actualResponse.status.description).to.equal(testDataChunk.expectedResponse.status.description)",
							"setTimeout(function(){console.log(\"Sleeping for 30 seconds before next request.\");}, 30000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "url": "{{host_filing}}/institutions/{{test-lei}}/filings/{{filing-year}}/submissions/{{sequenceNumber}}",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {"key": "Authorization",
            "value": "{{authToken}}"
          }

        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "enabled": true,
              "src": "{{sourceFile}}"
            }
          ]
        },
        "description": "Upload A Submission Test"
      },
      "response": []
    },
		{
			"name": "Get Latest Submission Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\",function () {",
							"      pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get Latest Submission Test\", function () {",
							"let actualResponse = pm.response.json()",
							"let testData = pm.iterationData.get(\"testData\")",
							"let testDataChunk = testData[testNumber-1]",
							"pm.expect(actualResponse.status.code).to.be.oneOf([14]);",
							"console.log(JSON.stringify(actualResponse))",
							"});"
						]
					}
				}
			],
			"request": {
				"url": "{{host_filing}}/institutions/{{test-lei}}/filings/{{filing-year}}/submissions/latest",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
                      "value": "application/json"

                    },
                  {"key": "Authorization",
                  "value": "{{authToken}}"
                  }

				],
				"body": {},
				"description": "Get Latest Submission Test"
			},
			"response": []
		},
		{
      "name": "Sign A Submission Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200, 201 or 400\",function () {",
              "pm.expect(pm.response.code).to.be.oneOf([200,201,400]);",
              "});",
              "",
              "pm.test(\"Start A Submission Test\", function () {",
									"let actualResponse = pm.response.json()",
									"console.log(JSON.stringify(actualResponse))",
									"pm.expect(actualResponse.status.code).to.be.oneOf([15]);",

              "});"
            ]
          }
        }
      ],
      "request": {
				"url": "{{host_filing}}/institutions/{{test-lei}}/filings/{{filing-year}}/submissions/{{sequenceNumber}}/sign",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"

          },
          {"key": "Authorization",
            "value": "{{authToken}}"
          }

        ],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}"
				},
        "description": "Sign A Submission Test"
      },
      "response": []
    }
  ]
}
